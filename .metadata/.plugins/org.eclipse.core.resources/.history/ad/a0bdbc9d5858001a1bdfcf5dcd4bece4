/*
 * COPYRIGHT. HSBC HOLDINGS PLC 2019. ALL RIGHTS RESERVED.
 *
 * This software is only to be used for the purpose for which it has been
 * provided. No part of it is to be reproduced, disassembled, transmitted,
 * stored in a retrieval system nor translated in any human or computer
 * language in any way or for any other purposes whatsoever without the prior
 * written consent of HSBC Holdings plc.
 */
package com.demo;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class FileCopy {

    private static String destination;
    private static List<File> onlyFiles;

    static class CopyThread implements Runnable {

        private int taskId;

        public CopyThread(final int taskId) {
            this.taskId = taskId;
        }

        public void run() {
            System.out.println(
                Thread.currentThread().getName() + " (Start) copying file = " + FileCopy.onlyFiles.get(this.taskId).getName());
            File file2 = FileCopy.onlyFiles.get(this.taskId);
            String fileName = file2.getName();
            String finalDestination = FileCopy.destination + "\\" + fileName;
            File file3 = new File(finalDestination);
            copyFileUsingStream(file2, file3);
            System.out.println(
                Thread.currentThread().getName() + " (End) copied file = " + FileCopy.onlyFiles.get(this.taskId).getName()); // name
        }

    }

    public static void copyFileUsingStream(final File sourceFile, final File destinationFile) {
        try (InputStream is = new FileInputStream(sourceFile.getPath());
            OutputStream os = new FileOutputStream(destinationFile.getPath());) {
            byte[] buffer = new byte[1024];
            int length;
            while ((length = is.read(buffer)) > 0) {
                os.write(buffer, 0, length);
            }
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    private static void initialise() {
        String source = "D:\\sts-workspace\\source1";
        FileCopy.destination = "D:\\sts-workspace\\destination1";
        File sourceFolder = new File(source);
        File sourcefiles[] = sourceFolder.listFiles();
        FileCopy.onlyFiles = new ArrayList<>();
        for (File file2 : sourcefiles) {
            if (!file2.isDirectory()) {
                FileCopy.onlyFiles.add(file2);
            }
        }
        File destinationFolder = new File(FileCopy.destination);
        destinationFolder.mkdir();
        System.out.println("Initialization done");
    }

    public static void main(final String[] args) {
        initialise();
        ExecutorService executor = Executors.newCachedThreadPool();
        for (int i = 0; i < FileCopy.onlyFiles.size(); i++) {
            Runnable worker = new CopyThread(i);
            executor.execute(worker);
        }
        executor.shutdown();
        try {
            executor.awaitTermination(20, TimeUnit.SECONDS);

        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("FileCopy.main() end");
    }


}
