/*
 * COPYRIGHT. HSBC HOLDINGS PLC 2019. ALL RIGHTS RESERVED.
 *
 * This software is only to be used for the purpose for which it has been
 * provided. No part of it is to be reproduced, disassembled, transmitted,
 * stored in a retrieval system nor translated in any human or computer
 * language in any way or for any other purposes whatsoever without the prior
 * written consent of HSBC Holdings plc.
 */
package com.demo;

import java.util.Arrays;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;
import java.util.stream.IntStream;

class SumTask extends RecursiveTask<Integer> { // recursive task already
                                               // implements forkjoin

    private int[] numbers;

    public SumTask(final int[] numbers) {
        this.numbers = numbers;

    }

    protected Integer compute() {// compute is a function of recursive task
        StringBuffer message = new StringBuffer();
        message.append("Thread Name:" + Thread.currentThread().getName() + "= ");
        for (int item : this.numbers) {
            message.append(item + ", ");
        }
        System.out.println(message);
        if (this.numbers.length > 5) {
            SumTask left = new SumTask(Arrays.copyOfRange(this.numbers, 0, this.numbers.length / 2));
            SumTask right = new SumTask(Arrays.copyOfRange(this.numbers, this.numbers.length / 2, this.numbers.length));
            left.fork(); // this will again call compute
            right.fork();// this will again call compute
            return left.join() + right.join();
        } else {
            return IntStream.of(this.numbers).sum();
        }
    }

}


public class ForkAndJoinDemo {

    public static void main(final String[] args) {
        int[] numbers = {1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5};
        System.out.println("Sum:" + IntStream.of(numbers).sum());
        ForkJoinPool forkJoinPool = new ForkJoinPool(Runtime.getRuntime().availableProcessors());
        SumTask task = new SumTask(numbers);
        int result = forkJoinPool.invoke(task); // calls compute
        System.out.println("ForkJoinResult=" + result);

    }

}
